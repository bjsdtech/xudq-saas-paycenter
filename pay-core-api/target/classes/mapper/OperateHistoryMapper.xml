<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.xudq.api.dao.OperateHistoryMapper" >
  <resultMap id="BaseResultMap" type="com.xudq.api.po.OperateHistory" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="entity_id" property="entityId" jdbcType="VARCHAR" />
    <result column="type" property="type" jdbcType="VARCHAR" />
    <result column="operator_id" property="operatorId" jdbcType="VARCHAR" />
    <result column="operator_name" property="operatorName" jdbcType="VARCHAR" />
    <result column="delete_flag" property="deleteFlag" jdbcType="VARCHAR" />
    <result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
    <result column="update_time" property="updateTime" jdbcType="TIMESTAMP" />
  </resultMap>
  <resultMap id="ResultMapWithBLOBs" type="com.xudq.api.po.OperateHistoryWithBLOBs" extends="BaseResultMap" >
    <result column="origin_json" property="originJson" jdbcType="LONGVARCHAR" />
    <result column="new_json" property="newJson" jdbcType="LONGVARCHAR" />
    <result column="difference" property="difference" jdbcType="LONGVARCHAR" />
  </resultMap>
  <sql id="Base_Column_List" >
    id, entity_id, type, operator_id, operator_name, delete_flag, create_time, update_time
  </sql>
  <sql id="Blob_Column_List" >
    origin_json, new_json, difference
  </sql>
  <select id="selectByPrimaryKey" resultMap="ResultMapWithBLOBs" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from operate_history
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from operate_history
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.xudq.api.po.OperateHistoryWithBLOBs" >
    insert into operate_history (id, entity_id, type, 
      operator_id, operator_name, delete_flag, 
      create_time, update_time, origin_json, 
      new_json, difference)
    values (#{id,jdbcType=INTEGER}, #{entityId,jdbcType=VARCHAR}, #{type,jdbcType=VARCHAR}, 
      #{operatorId,jdbcType=VARCHAR}, #{operatorName,jdbcType=VARCHAR}, #{deleteFlag,jdbcType=VARCHAR}, 
      #{createTime,jdbcType=TIMESTAMP}, #{updateTime,jdbcType=TIMESTAMP}, #{originJson,jdbcType=LONGVARCHAR}, 
      #{newJson,jdbcType=LONGVARCHAR}, #{difference,jdbcType=LONGVARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.xudq.api.po.OperateHistoryWithBLOBs" >
    insert into operate_history
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="entityId != null" >
        entity_id,
      </if>
      <if test="type != null" >
        type,
      </if>
      <if test="operatorId != null" >
        operator_id,
      </if>
      <if test="operatorName != null" >
        operator_name,
      </if>
      <if test="deleteFlag != null" >
        delete_flag,
      </if>
      <if test="createTime != null" >
        create_time,
      </if>
      <if test="updateTime != null" >
        update_time,
      </if>
      <if test="originJson != null" >
        origin_json,
      </if>
      <if test="newJson != null" >
        new_json,
      </if>
      <if test="difference != null" >
        difference,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="entityId != null" >
        #{entityId,jdbcType=VARCHAR},
      </if>
      <if test="type != null" >
        #{type,jdbcType=VARCHAR},
      </if>
      <if test="operatorId != null" >
        #{operatorId,jdbcType=VARCHAR},
      </if>
      <if test="operatorName != null" >
        #{operatorName,jdbcType=VARCHAR},
      </if>
      <if test="deleteFlag != null" >
        #{deleteFlag,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null" >
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null" >
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="originJson != null" >
        #{originJson,jdbcType=LONGVARCHAR},
      </if>
      <if test="newJson != null" >
        #{newJson,jdbcType=LONGVARCHAR},
      </if>
      <if test="difference != null" >
        #{difference,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.xudq.api.po.OperateHistoryWithBLOBs" >
    update operate_history
    <set >
      <if test="entityId != null" >
        entity_id = #{entityId,jdbcType=VARCHAR},
      </if>
      <if test="type != null" >
        type = #{type,jdbcType=VARCHAR},
      </if>
      <if test="operatorId != null" >
        operator_id = #{operatorId,jdbcType=VARCHAR},
      </if>
      <if test="operatorName != null" >
        operator_name = #{operatorName,jdbcType=VARCHAR},
      </if>
      <if test="deleteFlag != null" >
        delete_flag = #{deleteFlag,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null" >
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null" >
        update_time = #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="originJson != null" >
        origin_json = #{originJson,jdbcType=LONGVARCHAR},
      </if>
      <if test="newJson != null" >
        new_json = #{newJson,jdbcType=LONGVARCHAR},
      </if>
      <if test="difference != null" >
        difference = #{difference,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="com.xudq.api.po.OperateHistoryWithBLOBs" >
    update operate_history
    set entity_id = #{entityId,jdbcType=VARCHAR},
      type = #{type,jdbcType=VARCHAR},
      operator_id = #{operatorId,jdbcType=VARCHAR},
      operator_name = #{operatorName,jdbcType=VARCHAR},
      delete_flag = #{deleteFlag,jdbcType=VARCHAR},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP},
      origin_json = #{originJson,jdbcType=LONGVARCHAR},
      new_json = #{newJson,jdbcType=LONGVARCHAR},
      difference = #{difference,jdbcType=LONGVARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.xudq.api.po.OperateHistory" >
    update operate_history
    set entity_id = #{entityId,jdbcType=VARCHAR},
      type = #{type,jdbcType=VARCHAR},
      operator_id = #{operatorId,jdbcType=VARCHAR},
      operator_name = #{operatorName,jdbcType=VARCHAR},
      delete_flag = #{deleteFlag,jdbcType=VARCHAR},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <sql id="where_sql" >
    <where >
      <if test="po.entityId != null" >
        AND entity_id = #{po.entityId,jdbcType=VARCHAR}
      </if>
      <if test="po.type != null" >
        AND type = #{po.type,jdbcType=VARCHAR}
      </if>
      <if test="po.operatorId != null" >
        AND operator_id = #{po.operatorId,jdbcType=VARCHAR}
      </if>
      <if test="po.operatorName != null" >
        AND operator_name = #{po.operatorName,jdbcType=VARCHAR}
      </if>
      <if test="po.deleteFlag != null" >
        AND delete_flag = #{po.deleteFlag,jdbcType=VARCHAR}
      </if>
      <if test="po.createTime != null" >
        AND create_time = #{po.createTime,jdbcType=TIMESTAMP}
      </if>
      <if test="po.updateTime != null" >
        AND update_time = #{po.updateTime,jdbcType=TIMESTAMP}
      </if>
    </where>
  </sql>
  <select id="selectByParam" resultMap="BaseResultMap" parameterType="java.util.Map" >
    select
    <include refid="Base_Column_List" />
    from operate_history
    <if test="po!= null" >
      <include refid="where_sql" />
    </if>
    <if test="start != null and end != null" >
      LIMIT #{start},#{end}
    </if>
  </select>
  <select id="selectCountByParam" parameterType="java.util.Map" resultType="java.lang.Integer" >
    select count(1)
    from operate_history
    <if test="po!= null" >
      <include refid="where_sql" />
    </if>
  </select>
  <insert id="batchInsert" parameterType="java.util.Map" >
    insert into operate_history (
    entity_id,type,operator_id,
    operator_name,delete_flag,create_time,
    update_time
    ) values
    <foreach collection="list" item="item" index="index" separator="," >
      (
      #{item.entityId,jdbcType=VARCHAR},#{item.type,jdbcType=VARCHAR},#{item.operatorId,jdbcType=VARCHAR},
      #{item.operatorName,jdbcType=VARCHAR},#{item.deleteFlag,jdbcType=VARCHAR},#{item.createTime,jdbcType=TIMESTAMP},
      #{item.updateTime,jdbcType=TIMESTAMP}
      )
    </foreach>
  </insert>
</mapper>