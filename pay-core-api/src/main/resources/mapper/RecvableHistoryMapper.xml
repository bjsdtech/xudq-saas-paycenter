<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.xudq.api.dao.RecvableHistoryMapper" >
  <resultMap id="BaseResultMap" type="com.xudq.api.po.RecvableHistory" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="order_id" property="orderId" jdbcType="VARCHAR" />
    <result column="business_order_id" property="businessOrderId" jdbcType="VARCHAR" />
    <result column="reconsume_times" property="reconsumeTimes" jdbcType="INTEGER" />
    <result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
    <result column="update_time" property="updateTime" jdbcType="TIMESTAMP" />
  </resultMap>
  <resultMap id="ResultMapWithBLOBs" type="com.xudq.api.po.RecvableHistory" extends="BaseResultMap" >
    <result column="pos_data" property="posData" jdbcType="LONGVARCHAR" />
  </resultMap>
  <sql id="Base_Column_List" >
    id, order_id, business_order_id, reconsume_times, create_time, update_time
  </sql>
  <sql id="Blob_Column_List" >
    pos_data
  </sql>
  <select id="selectByPrimaryKey" resultMap="ResultMapWithBLOBs" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from recvable_history
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from recvable_history
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.xudq.api.po.RecvableHistory" >
    insert into recvable_history (id, order_id, business_order_id, 
      reconsume_times, pos_data)
    values (#{id,jdbcType=INTEGER}, #{orderId,jdbcType=VARCHAR}, #{businessOrderId,jdbcType=VARCHAR}, 
      #{reconsumeTimes,jdbcType=INTEGER}, #{posData,jdbcType=LONGVARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.xudq.api.po.RecvableHistory" >
    insert into recvable_history
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="orderId != null" >
        order_id,
      </if>
      <if test="businessOrderId != null" >
        business_order_id,
      </if>
      <if test="reconsumeTimes != null" >
        reconsume_times,
      </if>
      <if test="createTime != null" >
        create_time,
      </if>
      <if test="updateTime != null" >
        update_time,
      </if>
      <if test="posData != null" >
        pos_data,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="orderId != null" >
        #{orderId,jdbcType=VARCHAR},
      </if>
      <if test="businessOrderId != null" >
        #{businessOrderId,jdbcType=VARCHAR},
      </if>
      <if test="reconsumeTimes != null" >
        #{reconsumeTimes,jdbcType=INTEGER},
      </if>
      <if test="createTime != null" >
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null" >
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="posData != null" >
        #{posData,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.xudq.api.po.RecvableHistory" >
    update recvable_history
    <set >
      <if test="orderId != null" >
        order_id = #{orderId,jdbcType=VARCHAR},
      </if>
      <if test="businessOrderId != null" >
        business_order_id = #{businessOrderId,jdbcType=VARCHAR},
      </if>
      <if test="reconsumeTimes != null" >
        reconsume_times = #{reconsumeTimes,jdbcType=INTEGER},
      </if>
      <if test="createTime != null" >
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null" >
        update_time = #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="posData != null" >
        pos_data = #{posData,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="com.xudq.api.po.RecvableHistory" >
    update recvable_history
    set order_id = #{orderId,jdbcType=VARCHAR},
      business_order_id = #{businessOrderId,jdbcType=VARCHAR},
      reconsume_times = #{reconsumeTimes,jdbcType=INTEGER},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP},
      pos_data = #{posData,jdbcType=LONGVARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.xudq.api.po.RecvableHistory" >
    update recvable_history
    set order_id = #{orderId,jdbcType=VARCHAR},
      business_order_id = #{businessOrderId,jdbcType=VARCHAR},
      reconsume_times = #{reconsumeTimes,jdbcType=INTEGER},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <sql id="where_sql" >
    <where >
      <if test="po.orderId != null" >
        AND order_id = #{po.orderId,jdbcType=VARCHAR}
      </if>
      <if test="po.businessOrderId != null" >
        AND business_order_id = #{po.businessOrderId,jdbcType=VARCHAR}
      </if>
      <if test="po.reconsumeTimes != null" >
        AND reconsume_times = #{po.reconsumeTimes,jdbcType=INTEGER}
      </if>
      <if test="po.createTime != null" >
        AND create_time = #{po.createTime,jdbcType=TIMESTAMP}
      </if>
      <if test="po.updateTime != null" >
        AND update_time = #{po.updateTime,jdbcType=TIMESTAMP}
      </if>
    </where>
  </sql>
  <insert id="batchInsert" parameterType="java.util.Map" >
    insert into recvable_history (
    order_id,business_order_id,reconsume_times,
    create_time,update_time
    ) values
    <foreach collection="list" item="item" index="index" separator="," >
      (
      #{item.orderId,jdbcType=VARCHAR},#{item.businessOrderId,jdbcType=VARCHAR},#{item.reconsumeTimes,jdbcType=INTEGER},
      #{item.createTime,jdbcType=TIMESTAMP},#{item.updateTime,jdbcType=TIMESTAMP}
      )
    </foreach>
  </insert>
</mapper>